{
    "directed": true,
    "multigraph": true,
    "graph": {
        "cwd": "/Users/granthawkins/ragdaemon/tests/sample",
        "files_checksum": "4381b5299ef0f315b991322e11ddedb5"
    },
    "nodes": [
        {
            "calls": "{}",
            "checksum": "0d78297d1a17a762d876be21cc8692cb",
            "chunks": [
                {
                    "id": "src/interface.py:BASE",
                    "ref": "src/interface.py:1-4,15-16,19"
                },
                {
                    "id": "src/interface.py:parse_arguments",
                    "ref": "src/interface.py:5-14"
                },
                {
                    "id": "src/interface.py:render_response",
                    "ref": "src/interface.py:17-18"
                }
            ],
            "id": "src/interface.py",
            "ref": "src/interface.py",
            "summary": "Parse command-line input to extract operands and an operator for arithmetic operations and display the output to the console.",
            "summary_checksum": "156e6b95a939cc690524c7e96448c787",
            "type": "file",
            "document": "src/interface.py\nimport argparse\nimport re\n\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description=\"Basic Calculator\")\n    parser.add_argument(\"operation\", type=str, help=\"Calculation operation\")\n    args = parser.parse_args()\n\n    # use re to parse symbol, nubmer before, nubmer after\n    match = re.match(r\"(\\d+)(\\D)(\\d+)\", args.operation)\n    if match is None:\n        raise ValueError(\"Invalid operation\")\n    return int(match.group(1)), match.group(2), int(match.group(3))\n\n\ndef render_response(result):\n    print(result)\n"
        },
        {
            "checksum": "332606dfbd176bd16b6158acd375689d",
            "id": "README.md",
            "ref": "README.md",
            "summary": "Describe the application's experimental purpose in testing the limits of the treesitter parser.",
            "summary_checksum": "f512afb951427a1494eecd927607aa42",
            "type": "file",
            "document": "README.md\nAn unnecessarily convoluted app to test the boundaries of the treesitter parser\n"
        },
        {
            "calls": "{}",
            "checksum": "b9ba74388a4d956f0aff968bfc165db3",
            "chunks": [],
            "id": "src/__init__.py",
            "ref": "src/__init__.py",
            "summary": "Establish the 'src' as a Python package to organize related modules concerning command-line based arithmetic operations, without adding any explicit functionality.",
            "summary_checksum": "207e3de4ed658542202ca6ccc3376a96",
            "type": "file",
            "document": "src/__init__.py\n"
        },
        {
            "checksum": "39611184a249763e91b60432ae324486",
            "id": ".gitignore",
            "ref": ".gitignore",
            "summary": "Manage exclusions for version control by specifying files and directories that Git should ignore, while ensuring the .gitignore file itself remains tracked.",
            "summary_checksum": "5f3c1aebfa8418a5845a2c5ddc2b33cf",
            "type": "file",
            "document": ".gitignore\n.ragdaemon\n**/.*\n**/__pycache__\n!.gitignore\n"
        },
        {
            "calls": "{}",
            "checksum": "cfe1b2f9cda812d0e1f68eac86539e94",
            "chunks": [
                {
                    "id": "src/operations.py:BASE",
                    "ref": "src/operations.py:1-3,6-7,10-11,14-15,18-19,22"
                },
                {
                    "id": "src/operations.py:add",
                    "ref": "src/operations.py:4-5"
                },
                {
                    "id": "src/operations.py:subtract",
                    "ref": "src/operations.py:8-9"
                },
                {
                    "id": "src/operations.py:multiply",
                    "ref": "src/operations.py:12-13"
                },
                {
                    "id": "src/operations.py:divide",
                    "ref": "src/operations.py:16-17"
                },
                {
                    "id": "src/operations.py:sqrt",
                    "ref": "src/operations.py:20-21"
                }
            ],
            "id": "src/operations.py",
            "ref": "src/operations.py",
            "summary": "Define basic arithmetic operations including addition, subtraction, multiplication, division, and square root calculation utilizing Python's math library.",
            "summary_checksum": "f32593b8091a214cc0042312abb4626c",
            "type": "file",
            "document": "src/operations.py\nimport math\n\n\ndef add(a, b):\n    return a + b\n\n\ndef subtract(a, b):\n    return a - b\n\n\ndef multiply(a, b):\n    return a * b\n\n\ndef divide(a, b):\n    return a / b\n\n\ndef sqrt(a):\n    return math.sqrt(a)\n"
        },
        {
            "calls": "{\"src/interface.py:parse_arguments\": [6], \"src/interface.py:render_response\": [19], \"src/operations.py:add\": [9], \"src/operations.py:subtract\": [11], \"src/operations.py:multiply\": [13], \"src/operations.py:divide\": [15]}",
            "checksum": "30a15283b0f5d5ac17a2d890a00675d9",
            "chunks": [
                {
                    "id": "main.py:BASE",
                    "ref": "main.py:1-4,20-24"
                },
                {
                    "id": "main.py:main",
                    "ref": "main.py:5-19"
                }
            ],
            "id": "main.py",
            "ref": "main.py",
            "summary": "Execute arithmetic operations based on command-line input and produce an output.",
            "summary_checksum": "23112504dd4d8d6daf28cb234eb9a7f3",
            "type": "file",
            "document": "main.py\nfrom src.interface import parse_arguments, render_response\nfrom src.operations import add, divide, multiply, subtract\n\n\ndef main():\n    a, op, b = parse_arguments()\n\n    if op == \"+\":\n        result = add(a, b)\n    elif op == \"-\":\n        result = subtract(a, b)\n    elif op == \"*\":\n        result = multiply(a, b)\n    elif op == \"/\":\n        result = divide(a, b)\n    else:\n        raise ValueError(\"Unsupported operation\")\n\n    render_response(result)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
            "checksum": "b97e74d824fca5e980257ed15bb800b3",
            "id": "ROOT",
            "ref": ".",
            "summary": "Execute simple arithmetic operations from command-line input and explore the capabilities of the treesitter parser, organizing the code into clear modules within the source directory.",
            "summary_checksum": "53a5d32f0cc62b73d0129d17ca1a64e5",
            "type": "directory",
            "document": ".\n.gitignore\nREADME.md\nmain.py\nsrc/__init__.py\nsrc/interface.py\nsrc/operations.py"
        },
        {
            "checksum": "6a31bb042874e065fea5bcbc36362d58",
            "id": "src",
            "ref": "src",
            "summary": "Organize code modules for a simple arithmetic operations application. It includes files for initializing the package, parsing command-line input, and defining arithmetic operations.",
            "summary_checksum": "0d9635c66b257d6f31f165fea667e3fd",
            "type": "directory",
            "document": "src\n__init__.py\ninterface.py\noperations.py"
        },
        {
            "checksum": "1f2a24668c773ee52d6067e78aa20988",
            "id": "src/interface.py:BASE",
            "ref": "src/interface.py:1-4,15-16,19",
            "summary": "No action is described as the provided code only includes import statements.",
            "summary_checksum": "775efab314470411a3b831802154edff",
            "type": "chunk",
            "document": "src/interface.py:1-4,15-16,19\nimport argparse\nimport re\n\n\n\n\n\n"
        },
        {
            "checksum": "9d3f1e521d73b8280485d5c1153ed428",
            "id": "src/interface.py:parse_arguments",
            "ref": "src/interface.py:5-14",
            "summary": "Parse command-line arguments into three components: an integer, a symbol representing a mathematical operation, and a second integer.",
            "summary_checksum": "eaca0178f36ef4919aad47f57682c7e7",
            "type": "chunk",
            "document": "src/interface.py:5-14\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description=\"Basic Calculator\")\n    parser.add_argument(\"operation\", type=str, help=\"Calculation operation\")\n    args = parser.parse_args()\n\n    # use re to parse symbol, nubmer before, nubmer after\n    match = re.match(r\"(\\d+)(\\D)(\\d+)\", args.operation)\n    if match is None:\n        raise ValueError(\"Invalid operation\")\n    return int(match.group(1)), match.group(2), int(match.group(3))\n"
        },
        {
            "checksum": "1ccdd90fad048efd1dcb0f09c169620c",
            "id": "src/interface.py:render_response",
            "ref": "src/interface.py:17-18",
            "summary": "Display the result of a mathematical operation to standard output.",
            "summary_checksum": "8d69c71cda68ed3dad02d2c6f8e31503",
            "type": "chunk",
            "document": "src/interface.py:17-18\ndef render_response(result):\n    print(result)\n"
        },
        {
            "checksum": "dc61d9d0a9b01aa0b099f859f7409d6c",
            "id": "src/operations.py:BASE",
            "ref": "src/operations.py:1-3,6-7,10-11,14-15,18-19,22",
            "summary": "No operation is performed in the provided code snippet as it only includes an import statement for the math library and no other executable code.",
            "summary_checksum": "d41598bfcfe2731338d393cd640de305",
            "type": "chunk",
            "document": "src/operations.py:1-3,6-7,10-11,14-15,18-19,22\nimport math\n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
            "checksum": "85e2229ba0d05c63100d164fa3dddc52",
            "id": "src/operations.py:add",
            "ref": "src/operations.py:4-5",
            "summary": "Define an addition function that takes two arguments and returns their sum.",
            "summary_checksum": "55c3d4fb8a3bb7f1e5c414d11d08ade8",
            "type": "chunk",
            "document": "src/operations.py:4-5\ndef add(a, b):\n    return a + b\n"
        },
        {
            "checksum": "d71832a93bf084918e90d981da01207c",
            "id": "src/operations.py:subtract",
            "ref": "src/operations.py:8-9",
            "summary": "Perform subtraction by taking two inputs, 'a' and 'b', and returning the result of 'a' - 'b'.",
            "summary_checksum": "64eb46f64d0361a7d7a2ef7e4afaf0f5",
            "type": "chunk",
            "document": "src/operations.py:8-9\ndef subtract(a, b):\n    return a - b\n"
        },
        {
            "checksum": "28efbdcfc7543aafe04c2e16e54221b7",
            "id": "src/operations.py:multiply",
            "ref": "src/operations.py:12-13",
            "summary": "Multiply two numbers and return the result.",
            "summary_checksum": "a1502efd32ac3ff71c767a1a31d359ef",
            "type": "chunk",
            "document": "src/operations.py:12-13\ndef multiply(a, b):\n    return a * b\n"
        },
        {
            "checksum": "7c35cdfb2a9b7374e992709ae4e2d62d",
            "id": "src/operations.py:divide",
            "ref": "src/operations.py:16-17",
            "summary": "Perform division on two numbers, `a` and `b`, and return the result.",
            "summary_checksum": "108512db41db799615544198f287815d",
            "type": "chunk",
            "document": "src/operations.py:16-17\ndef divide(a, b):\n    return a / b\n"
        },
        {
            "checksum": "b2502cd76efe086ad3603c9f90e9ad1a",
            "id": "src/operations.py:sqrt",
            "ref": "src/operations.py:20-21",
            "summary": "Calculate the square root of a number using the math library's sqrt function.",
            "summary_checksum": "bff8880d50f1e5c5d011135b8c720b43",
            "type": "chunk",
            "document": "src/operations.py:20-21\ndef sqrt(a):\n    return math.sqrt(a)\n"
        },
        {
            "checksum": "eb2c4b770fcef0986d21af9dc424123a",
            "id": "main.py:BASE",
            "ref": "main.py:1-4,20-24",
            "summary": "Execute the main function if the script is run as the main program.",
            "summary_checksum": "5536373063c7333d4c35c6497b3862d6",
            "type": "chunk",
            "document": "main.py:1-4,20-24\nfrom src.interface import parse_arguments, render_response\nfrom src.operations import add, divide, multiply, subtract\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
        },
        {
            "checksum": "1823a6ee66760debfae5286bb2f53447",
            "id": "main.py:main",
            "ref": "main.py:5-19",
            "summary": "Parse command-line arguments for a basic arithmetic operation, perform the corresponding calculation, and print the result. If an unsupported operation is specified, raise a ValueError.",
            "summary_checksum": "6be54ffb7a09c09c621330f1edef8687",
            "type": "chunk",
            "document": "main.py:5-19\ndef main():\n    a, op, b = parse_arguments()\n\n    if op == \"+\":\n        result = add(a, b)\n    elif op == \"-\":\n        result = subtract(a, b)\n    elif op == \"*\":\n        result = multiply(a, b)\n    elif op == \"/\":\n        result = divide(a, b)\n    else:\n        raise ValueError(\"Unsupported operation\")\n\n    render_response(result)\n"
        }
    ],
    "links": [
        {
            "type": "hierarchy",
            "source": "src/interface.py",
            "target": "src/interface.py:BASE",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py",
            "target": "src/operations.py:BASE",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "main.py",
            "target": "main.py:BASE",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "ROOT",
            "target": "main.py",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "ROOT",
            "target": "src",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "ROOT",
            "target": "README.md",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "ROOT",
            "target": ".gitignore",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src",
            "target": "src/operations.py",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src",
            "target": "src/__init__.py",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src",
            "target": "src/interface.py",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/interface.py:BASE",
            "target": "src/interface.py:render_response",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/interface.py:BASE",
            "target": "src/interface.py:parse_arguments",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py:BASE",
            "target": "src/operations.py:multiply",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py:BASE",
            "target": "src/operations.py:divide",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py:BASE",
            "target": "src/operations.py:sqrt",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py:BASE",
            "target": "src/operations.py:add",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "src/operations.py:BASE",
            "target": "src/operations.py:subtract",
            "key": 0
        },
        {
            "type": "hierarchy",
            "source": "main.py:BASE",
            "target": "main.py:main",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/interface.py:parse_arguments",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/interface.py:render_response",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/operations.py:add",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/operations.py:subtract",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/operations.py:multiply",
            "key": 0
        },
        {
            "type": "call",
            "source": "main.py:main",
            "target": "src/operations.py:divide",
            "key": 0
        }
    ]
}
